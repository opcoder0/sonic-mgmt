steps:
  - script: |
      echo "Checking if pre-commit configuration .pre-commit-config.[yaml|yml] exists"
      if [ -f .pre-commit-config.yaml ] || [ -f .pre-commit-config.yml ]; then
        # Update with timeout and retry logic
        timeout 180s sudo apt-get update -y || {
          echo "apt-get update failed or timed out"
          exit 1
        }
        # Install aspell and aspell-en non-interactively
        timeout 180s sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends aspell aspell-en libenchant-2-2 libenchant-2-dev || {
          echo "Failed to install aspell or aspell-en or libenchant-2-2 or libenchant-2-dev"
          exit 1
        }
        pip install pyenchant
        pip install pre-commit
        pip install pylint # required as pylint is run in local mode

        echo "Identifying changed files in tests/common2 directory..."

        # Get the target branch name (e.g., 'main' or 'master')
        # This assumes a typical Gitflow or GitHub flow where you merge into main/master
        # You might need to adjust $(Build.SourceBranch) based on your specific trigger
        # For PRs, $(System.PullRequest.TargetBranch) is more appropriate.
        # For simplicity, let's assume we're comparing against the common ancestor with origin/main.
        # Adjust 'main' to your default branch name if it's different (e.g., 'master')
        BASE_COMMIT=$(git merge-base HEAD origin/master || git merge-base HEAD origin/master || echo HEAD~1)
        if [ "$BASE_COMMIT" = "HEAD~1" ]; then
            echo "Warning: Could not determine merge base with main/master. Comparing with previous commit (HEAD~1)."
        else
            echo "Comparing with base commit: $BASE_COMMIT"
        fi

        # Get changed files relative to the base commit, filter to tests/common2
        CHANGED_FILES=$(git diff --name-only "$BASE_COMMIT" HEAD -- tests/common2 | tr '\n' ' ')

        if [ -z "$CHANGED_FILES" ]; then
          echo "No relevant files changed in tests/common2. Skipping pre-commit run for this directory."
        else
          echo "Changed files in tests/common2: $CHANGED_FILES"
          echo "Running pre-commit on specific changed files..."
          # configuration is loaded from .pre-commit-config.yaml
          # We pass the list of changed files to pre-commit
          pre-commit run --files $CHANGED_FILES --show-diff-on-failure --color=never | head -20
        fi
      else
        echo "Pre-commit configuration not found. Nothing to do"
      fi
    displayName: 'Run pre-commit hooks on changed files in tests/common2'
